/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/
import {useGLTF, useHelper, useScroll} from "@react-three/drei";
import * as THREE from "three";
import {useLayoutEffect, useRef} from "react";
import gsap from "gsap";
import {useFrame} from "@react-three/fiber";
import {ThreeElements} from "@react-three/fiber/dist/declarations/src/three-types";

export const VIEWPORT_HEIGHT = 2.3;
export const SECTIONS_COUNT = 2;

// @ts-ignore
export function Clocks({helpers}) {

  // @ts-ignore
  const {nodes, materials} = useGLTF("./models/clocks.gltf");
  console.log({nodes})

  const groupRef = useRef<ThreeElements["group"]>();
  const standRef = useRef<ThreeElements["group"]>();
  const clocksRef = useRef<ThreeElements["group"]>();
  const tlRef = useRef<gsap.core.Timeline>();

  useHelper(helpers ? groupRef : undefined, THREE.BoxHelper, 'cyan');


  const scroll = useScroll();

  useFrame(() => {
    const seek = scroll.offset * tlRef.current!.duration();
    tlRef.current?.seek(seek);
  });

  // @ts-ignore
  useLayoutEffect(() => {
    const initial = {
      y: VIEWPORT_HEIGHT * (SECTIONS_COUNT - 1),
      duration: 2,
    };
    tlRef.current = gsap.timeline();
    console.log('useLayoutEffect', {
      initial
    })
    // @ts-ignore
    // tlRef.current.to(groupRef.current?.position, initial);

    tlRef.current.from(groupRef.current?.rotation, {
      duration: 2,
      y: Math.PI / 2,
    }, 0);

    const scaleMultiplier = 2;

    tlRef.current.to(groupRef.current?.scale, {
      duration: 2,
      y: groupRef.current?.scale.y * scaleMultiplier,
      x: groupRef.current?.scale.x * scaleMultiplier,
      z: groupRef.current?.scale.z * scaleMultiplier,
    }, '-=2');

    tlRef.current.to(groupRef.current?.rotation, {
      duration: 2,
      y: -Math.PI / 9,
    });

    tlRef.current.to(groupRef.current?.scale, {
      duration: 2,
      y: groupRef.current?.scale.y * 1.3,
      x: groupRef.current?.scale.x * 1.3,
      z: groupRef.current?.scale.z * 1.3,
    }, '-=2');

  }, []);

  return (
    <group dispose={null} ref={groupRef}>
      <group ref={standRef}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Stand.geometry}
          material={nodes.Stand.material}
        >
          <BaseMaterial/>
        </mesh>
      </group>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Magnet_1_border.geometry}
        material={nodes.Magnet_1_border.material}
        position={[1.14, 0.591, -0.461]}
      >
        <BaseMaterial/>
      </mesh>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Magnet_1.geometry}
        material={nodes.Magnet_1.material}
        position={[1.14, 0.591, -0.461]}
      >
        <BaseMaterial/>
      </mesh>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Magnet_2_border.geometry}
        material={nodes.Magnet_2_border.material}
        position={[-1.149, 0.591, -0.461]}
        rotation={[Math.PI / 2, 0, 0]}
        scale={[0.156, 0.053, 0.156]}
      >
        <BaseMaterial/>
      </mesh>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Magnet_2.geometry}
        material={nodes.Magnet_2.material}
        position={[-1.149, 0.591, -0.461]}
        rotation={[Math.PI / 2, 0, 0]}
        scale={[0.136, 0.05, 0.136]}
      >
        <BaseMaterial/>
      </mesh>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Back_base.geometry}
        material={nodes.Back_base.material}
        position={[0, 0.225, -0.277]}
      >
        <BaseMaterial/>
      </mesh>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Mute_btn_base.geometry}
        material={nodes.Mute_btn_base.material}
        position={[1.719, -0.043, -0.124]}
      >
        <BaseMaterial/>
      </mesh>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Mute_btn_top.geometry}
        material={nodes.Mute_btn_top.material}
        position={[1.741, -0.043, -0.124]}
      >
        <BaseMaterial/>
      </mesh>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Button_1.geometry}
        material={nodes.Button_1.material}
        position={[-1.215, -0.651, 0.124]}
      >
        <BaseMaterial/>
      </mesh>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Button_2.geometry}
        material={nodes.Button_2.material}
        position={[-0.577, -0.651, 0.124]}
      >
        <BaseMaterial/>
      </mesh>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Button_3.geometry}
        material={nodes.Button_3.material}
        position={[0.03, -0.651, 0.124]}
      >
        <BaseMaterial/>
      </mesh>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Button_4.geometry}
        material={nodes.Button_4.material}
        position={[0.649, -0.65, 0.126]}
      >
        <BaseMaterial color={'#E56607'}/>
      </mesh>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Base.geometry}
        material={nodes.Base.material}
      >
        <BaseMaterial/>
      </mesh>
    </group>
  );
}

function BaseMaterial({color}) {
  return <meshStandardMaterial color={color ?? "#ffffff"}
                               side={THREE.DoubleSide}
                               roughness={0.5}/>
}

useGLTF.preload("./models/clocks.gltf");
